%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2555) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 94 39
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 94 39
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.2 0.2 0.2 sc
q
0 39 m
94 39 l
94 0 l
0 0 l
0 39 l
h
W*
0 0 94 39 rc
-5 44 m
99 44 l
99 -5 l
-5 -5 l
h
f
Q
1 0.80000001 0 sc
q
16.959999 3.9000001 m
3.5 3.9000001 l
3.5 23.879999 l
5.8600001 17.98 10.56 10.82 16.959999 3.9000001 c
h
W*
0 0 94 39 rc
-1.5 28.879999 m
21.959999 28.879999 l
21.959999 -1.1 l
-1.5 -1.1 l
h
f
Q
q
35.099998 35.5 m
35.099998 19.58 l
35.080002 19.6 35.060001 19.620001 35.040001 19.639999 c
27.780001 27.299999 20.040001 32.939999 13.84 35.5 c
35.099998 35.5 l
h
W*
0 0 94 39 rc
8.8400002 40.5 m
40.099998 40.5 l
40.099998 14.58 l
8.8400002 14.58 l
h
f
Q
q
35.099998 18.219999 m
35.099998 15.42 l
34.380001 16.26 33.639999 17.08 32.84 17.9 c
24.120001 26.940001 14.12 31.4 10.5 27.9 c
6.8600001 24.4 10.98 14.24 19.700001 5.2199998 c
20.139999 4.7800002 20.58 4.3400002 21.02 3.9000001 c
18.360001 3.9000001 l
7.98 14.36 3.0599999 26.299999 7.3600001 30.58 c
9.9342928 33.142319 15.239661 32.371433 21.310648 29.095587 c
25.380405 26.899582 29.794222 23.577885 33.959999 19.379999 c
34.360001 19 34.740002 18.620001 35.099998 18.219999 c
h
W*
0 0 94 39 rc
0.80449086 37.108051 m
40.099998 37.108051 l
40.099998 -1.1 l
0.80449086 -1.1 l
h
f
Q
q
35.099998 14.02 m
35.099998 3.9000001 l
30.52 3.9000001 l
26.32 17.26 l
22.700001 3.9000001 l
22.26 3.9000001 l
21.6 4.5 20.940001 5.1399999 20.299999 5.8000002 c
13.2 13.16 10.12 21.68 13.42 24.860001 c
16.719999 28.040001 25.139999 24.66 32.240002 17.32 c
33.279999 16.24 34.240002 15.14 35.099998 14.02 c
h
W*
0 0 94 39 rc
7.0957599 31.056122 m
40.099998 31.056122 l
40.099998 -1.1 l
7.0957599 -1.1 l
h
f
Q
1 1 1 sc
q
39 35.221519 m
43.260761 35.221519 l
43.260761 12.626582 l
39 12.626582 l
39 35.221519 l
h
48.586708 35.221519 m
58.657597 35.221519 l
60.529747 35.221519 62.143669 34.931011 63.499367 34.349998 c
64.855064 33.768986 65.98481 32.962025 66.824051 31.929113 c
67.663292 30.896202 68.341141 29.701899 68.760757 28.346203 c
69.180382 26.990507 69.406326 25.505695 69.406326 23.956329 c
69.406326 22.406961 69.180382 20.922152 68.760757 19.566456 c
68.341141 18.21076 67.695572 16.984177 66.824051 15.983544 c
65.95253 14.950633 64.855064 14.143671 63.499367 13.562658 c
62.143669 12.981646 60.529747 12.691139 58.657597 12.691139 c
48.586708 12.691139 l
48.586708 35.221519 l
h
52.847469 15.85443 m
57.043671 15.85443 l
58.689873 15.85443 60.04557 16.048101 61.11076 16.467722 c
62.175949 16.887342 62.98291 17.436075 63.596203 18.17848 c
64.209496 18.920887 64.596832 19.760126 64.822784 20.728481 c
65.048737 21.696835 65.145569 22.762026 65.145569 23.924051 c
65.145569 25.086077 65.048737 26.118988 64.822784 27.119619 c
64.596832 28.120253 64.209496 28.959494 63.596203 29.669621 c
62.98291 30.379747 62.175949 30.96076 61.11076 31.380381 c
60.04557 31.799999 58.689873 31.993671 57.043671 31.993671 c
52.847469 31.993671 l
52.847469 15.85443 l
52.847469 15.85443 l
h
70.342407 35.221519 m
90 35.221519 l
90 31.799999 l
82.285446 31.799999 l
82.285446 12.626582 l
78.024681 12.626582 l
78.024681 31.799999 l
70.342407 31.799999 l
70.342407 35.221519 l
70.342407 35.221519 l
h
W*
0 0 94 39 rc
34 40.221519 m
95 40.221519 l
95 7.6265821 l
34 7.6265821 l
h
f
Q
q
42.340012 7.4089999 m
42.302677 7.5536675 42.251347 7.686666 42.186012 7.8080001 c
42.120678 7.9293342 42.036678 8.0343332 41.934013 8.1230001 c
41.831345 8.2116671 41.711178 8.2804995 41.573513 8.3295002 c
41.435844 8.3785 41.276012 8.4029999 41.094013 8.4029999 c
40.828011 8.4029999 40.598179 8.3493338 40.40451 8.2419996 c
40.210846 8.1346664 40.053345 7.9911675 39.932011 7.8115001 c
39.810677 7.6318326 39.720844 7.4276676 39.662514 7.1989999 c
39.604179 6.9703321 39.575012 6.7370014 39.575012 6.4990001 c
39.575012 6.2609987 39.604179 6.027668 39.662514 5.7989998 c
39.720844 5.5703321 39.810677 5.3661675 39.932011 5.1865001 c
40.053345 5.0068326 40.210846 4.8633337 40.40451 4.756 c
40.598179 4.6486659 40.828011 4.5949998 41.094013 4.5949998 c
41.290012 4.5949998 41.462677 4.6288328 41.612011 4.6964998 c
41.761345 4.7641668 41.889679 4.8574996 41.997013 4.9765 c
42.104347 5.0955005 42.188347 5.2343326 42.249012 5.3930001 c
42.309681 5.5516677 42.349346 5.7219992 42.368011 5.9039998 c
43.222012 5.9039998 l
43.203346 5.6053319 43.139179 5.3323345 43.02951 5.085 c
42.919846 4.8376656 42.771679 4.6241674 42.585011 4.4445 c
42.398346 4.2648325 42.179012 4.1260004 41.927013 4.0279999 c
41.675011 3.9299996 41.397346 3.881 41.094013 3.881 c
40.720676 3.881 40.385845 3.9498327 40.089512 4.0875001 c
39.793179 4.2251673 39.542347 4.4129987 39.337013 4.651 c
39.13168 4.8890014 38.974178 5.1666651 38.864513 5.4840002 c
38.754845 5.8013349 38.700012 6.1396646 38.700012 6.4990001 c
38.700012 6.8536682 38.754845 7.1896653 38.864513 7.507 c
38.974178 7.8243351 39.13168 8.1019993 39.337013 8.3400002 c
39.542347 8.578001 39.793179 8.7669992 40.089512 8.9069996 c
40.385845 9.0470009 40.720676 9.1169996 41.094013 9.1169996 c
41.374012 9.1169996 41.637676 9.0785007 41.885014 9.0015001 c
42.132347 8.9244995 42.35051 8.812501 42.539513 8.6654997 c
42.728512 8.5184994 42.881344 8.3400011 42.998013 8.1300001 c
43.114681 7.9199991 43.187012 7.6796679 43.215012 7.4089999 c
42.340012 7.4089999 l
h
46.148014 8.4029999 m
45.882011 8.4029999 45.65218 8.3493338 45.458511 8.2419996 c
45.264843 8.1346664 45.107346 7.9911675 44.986012 7.8115001 c
44.864677 7.6318326 44.774845 7.4276676 44.716511 7.1989999 c
44.65818 6.9703321 44.629013 6.7370014 44.629013 6.4990001 c
44.629013 6.2609987 44.65818 6.027668 44.716511 5.7989998 c
44.774845 5.5703321 44.864677 5.3661675 44.986012 5.1865001 c
45.107346 5.0068326 45.264843 4.8633337 45.458511 4.756 c
45.65218 4.6486659 45.882011 4.5949998 46.148014 4.5949998 c
46.414013 4.5949998 46.643845 4.6486659 46.837513 4.756 c
47.031181 4.8633337 47.188679 5.0068326 47.310013 5.1865001 c
47.431347 5.3661675 47.521179 5.5703321 47.579514 5.7989998 c
47.637844 6.027668 47.667011 6.2609987 47.667011 6.4990001 c
47.667011 6.7370014 47.637844 6.9703321 47.579514 7.1989999 c
47.521179 7.4276676 47.431347 7.6318326 47.310013 7.8115001 c
47.188679 7.9911675 47.031181 8.1346664 46.837513 8.2419996 c
46.643845 8.3493338 46.414013 8.4029999 46.148014 8.4029999 c
h
46.148014 9.1169996 m
46.521347 9.1169996 46.856178 9.0470009 47.152512 8.9069996 c
47.448849 8.7669992 47.699677 8.578001 47.905014 8.3400002 c
48.110348 8.1019993 48.267845 7.8243351 48.377514 7.507 c
48.487179 7.1896653 48.542011 6.8536682 48.542011 6.4990001 c
48.542011 6.1396646 48.487179 5.8013349 48.377514 5.4840002 c
48.267845 5.1666651 48.110348 4.8890014 47.905014 4.651 c
47.699677 4.4129987 47.448849 4.2251673 47.152512 4.0875001 c
46.856178 3.9498327 46.521347 3.881 46.148014 3.881 c
45.774677 3.881 45.439846 3.9498327 45.143513 4.0875001 c
44.847176 4.2251673 44.596348 4.4129987 44.391014 4.651 c
44.185677 4.8890014 44.028179 5.1666651 43.91851 5.4840002 c
43.808846 5.8013349 43.754013 6.1396646 43.754013 6.4990001 c
43.754013 6.8536682 43.808846 7.1896653 43.91851 7.507 c
44.028179 7.8243351 44.185677 8.1019993 44.391014 8.3400002 c
44.596348 8.578001 44.847176 8.7669992 45.143513 8.9069996 c
45.439846 9.0470009 45.774677 9.1169996 46.148014 9.1169996 c
h
49.340012 8.9980001 m
51.727013 8.9980001 l
52.277683 8.9980001 52.690678 8.8790016 52.966011 8.6409998 c
53.241348 8.4029989 53.379013 8.0716686 53.379013 7.6469998 c
53.379013 7.408999 53.344013 7.211834 53.274014 7.0555 c
53.20401 6.8991661 53.122345 6.7731671 53.029011 6.6774998 c
52.935677 6.5818329 52.843513 6.513 52.752514 6.4710002 c
52.66151 6.4289999 52.595013 6.401 52.553013 6.3870001 c
52.553013 6.3730001 l
52.627678 6.3636665 52.708179 6.3403335 52.794514 6.303 c
52.880844 6.2656665 52.961346 6.2061672 53.036011 6.1244998 c
53.11068 6.0428329 53.172512 5.9366674 53.221512 5.8060002 c
53.270512 5.6753325 53.295013 5.512001 53.295013 5.316 c
53.295013 5.0219984 53.317177 4.7548347 53.361511 4.5145001 c
53.405846 4.2741656 53.474678 4.1026673 53.568012 4 c
52.630013 4 l
52.564678 4.1073337 52.52618 4.2263327 52.514511 4.3569999 c
52.502846 4.4876671 52.497013 4.6136661 52.497013 4.7350001 c
52.497013 4.9636679 52.483013 5.1608324 52.455013 5.3264999 c
52.427013 5.4921675 52.375679 5.6298327 52.301014 5.7395 c
52.226345 5.8491673 52.124847 5.9296665 51.996513 5.9809999 c
51.868179 6.0323334 51.703678 6.0580001 51.503014 6.0580001 c
50.215012 6.0580001 l
50.215012 4 l
49.340012 4 l
49.340012 8.9980001 l
h
50.215012 6.723 m
51.650013 6.723 l
51.930012 6.723 52.142345 6.7894993 52.287014 6.9225001 c
52.431679 7.0555005 52.504013 7.2549987 52.504013 7.5209999 c
52.504013 7.6796675 52.480679 7.809166 52.434013 7.9095001 c
52.387344 8.0098343 52.323181 8.0879993 52.241512 8.1440001 c
52.159843 8.1999998 52.066513 8.2373333 51.961514 8.2559996 c
51.85651 8.2746668 51.748013 8.2840004 51.636013 8.2840004 c
50.215012 8.2840004 l
50.215012 6.723 l
h
54.268013 8.9980001 m
56.473011 8.9980001 l
56.827682 8.9980001 57.117012 8.9466667 57.341011 8.8439999 c
57.565014 8.741333 57.737679 8.6130009 57.859013 8.4589996 c
57.980347 8.3049994 58.063179 8.137001 58.107513 7.9549999 c
58.151844 7.7729993 58.174011 7.605001 58.174011 7.4510002 c
58.174011 7.2969995 58.151844 7.1301675 58.107513 6.9505 c
58.063179 6.7708325 57.980347 6.6040006 57.859013 6.4499998 c
57.737679 6.2959991 57.565014 6.1688337 57.341011 6.0685 c
57.117012 5.9681664 56.827682 5.9180002 56.473011 5.9180002 c
55.143013 5.9180002 l
55.143013 4 l
54.268013 4 l
54.268013 8.9980001 l
h
55.143013 6.632 m
56.424011 6.632 l
56.522011 6.632 56.622345 6.6459999 56.725014 6.6739998 c
56.827679 6.7020001 56.92218 6.7474995 57.008511 6.8105001 c
57.094845 6.8735003 57.164845 6.9574995 57.218513 7.0625 c
57.272179 7.1675005 57.299011 7.2993326 57.299011 7.4580002 c
57.299011 7.6213341 57.275681 7.7566662 57.229012 7.8639998 c
57.182346 7.971334 57.119347 8.0564995 57.040012 8.1195002 c
56.960678 8.1824999 56.869678 8.225667 56.767014 8.2489996 c
56.664345 8.2723331 56.55468 8.2840004 56.438011 8.2840004 c
55.143013 8.2840004 l
55.143013 6.632 l
h
61.065014 8.4029999 m
60.799011 8.4029999 60.56918 8.3493338 60.375511 8.2419996 c
60.181843 8.1346664 60.024345 7.9911675 59.903011 7.8115001 c
59.781677 7.6318326 59.691845 7.4276676 59.633511 7.1989999 c
59.57518 6.9703321 59.546013 6.7370014 59.546013 6.4990001 c
59.546013 6.2609987 59.57518 6.027668 59.633511 5.7989998 c
59.691845 5.5703321 59.781677 5.3661675 59.903011 5.1865001 c
60.024345 5.0068326 60.181843 4.8633337 60.375511 4.756 c
60.56918 4.6486659 60.799011 4.5949998 61.065014 4.5949998 c
61.331013 4.5949998 61.560844 4.6486659 61.754513 4.756 c
61.948181 4.8633337 62.105679 5.0068326 62.227013 5.1865001 c
62.348347 5.3661675 62.438179 5.5703321 62.496513 5.7989998 c
62.554848 6.027668 62.584011 6.2609987 62.584011 6.4990001 c
62.584011 6.7370014 62.554848 6.9703321 62.496513 7.1989999 c
62.438179 7.4276676 62.348347 7.6318326 62.227013 7.8115001 c
62.105679 7.9911675 61.948181 8.1346664 61.754513 8.2419996 c
61.560844 8.3493338 61.331013 8.4029999 61.065014 8.4029999 c
h
61.065014 9.1169996 m
61.438347 9.1169996 61.773178 9.0470009 62.069511 8.9069996 c
62.365849 8.7669992 62.616676 8.578001 62.822014 8.3400002 c
63.027348 8.1019993 63.184845 7.8243351 63.294514 7.507 c
63.404179 7.1896653 63.459011 6.8536682 63.459011 6.4990001 c
63.459011 6.1396646 63.404179 5.8013349 63.294514 5.4840002 c
63.184845 5.1666651 63.027348 4.8890014 62.822014 4.651 c
62.616676 4.4129987 62.365849 4.2251673 62.069511 4.0875001 c
61.773178 3.9498327 61.438347 3.881 61.065014 3.881 c
60.691677 3.881 60.356846 3.9498327 60.060513 4.0875001 c
59.764179 4.2251673 59.513348 4.4129987 59.308014 4.651 c
59.102676 4.8890014 58.945179 5.1666651 58.835514 5.4840002 c
58.725845 5.8013349 58.671013 6.1396646 58.671013 6.4990001 c
58.671013 6.8536682 58.725845 7.1896653 58.835514 7.507 c
58.945179 7.8243351 59.102676 8.1019993 59.308014 8.3400002 c
59.513348 8.578001 59.764179 8.7669992 60.060513 8.9069996 c
60.356846 9.0470009 60.691677 9.1169996 61.065014 9.1169996 c
h
64.257011 8.9980001 m
66.644012 8.9980001 l
67.194679 8.9980001 67.607681 8.8790016 67.883011 8.6409998 c
68.158348 8.4029989 68.296013 8.0716686 68.296013 7.6469998 c
68.296013 7.408999 68.261009 7.211834 68.19101 7.0555 c
68.12101 6.8991661 68.039345 6.7731671 67.946014 6.6774998 c
67.852676 6.5818329 67.760513 6.513 67.66951 6.4710002 c
67.578514 6.4289999 67.512009 6.401 67.470009 6.3870001 c
67.470009 6.3730001 l
67.544678 6.3636665 67.625175 6.3403335 67.71151 6.303 c
67.797844 6.2656665 67.878342 6.2061672 67.953011 6.1244998 c
68.027679 6.0428329 68.089516 5.9366674 68.138512 5.8060002 c
68.187515 5.6753325 68.212013 5.512001 68.212013 5.316 c
68.212013 5.0219984 68.234177 4.7548347 68.278511 4.5145001 c
68.322845 4.2741656 68.391678 4.1026673 68.485016 4 c
67.547012 4 l
67.481682 4.1073337 67.443176 4.2263327 67.431511 4.3569999 c
67.419846 4.4876671 67.414009 4.6136661 67.414009 4.7350001 c
67.414009 4.9636679 67.400009 5.1608324 67.372009 5.3264999 c
67.344009 5.4921675 67.292679 5.6298327 67.21801 5.7395 c
67.143349 5.8491673 67.041847 5.9296665 66.913513 5.9809999 c
66.785179 6.0323334 66.620682 6.0580001 66.420013 6.0580001 c
65.132011 6.0580001 l
65.132011 4 l
64.257011 4 l
64.257011 8.9980001 l
h
65.132011 6.723 m
66.567009 6.723 l
66.847015 6.723 67.059341 6.7894993 67.20401 6.9225001 c
67.348679 7.0555005 67.421013 7.2549987 67.421013 7.5209999 c
67.421013 7.6796675 67.397682 7.809166 67.351013 7.9095001 c
67.304344 8.0098343 67.240181 8.0879993 67.158516 8.1440001 c
67.076843 8.1999998 66.983513 8.2373333 66.87851 8.2559996 c
66.773514 8.2746668 66.665016 8.2840004 66.553009 8.2840004 c
65.132011 8.2840004 l
65.132011 6.723 l
h
70.522011 8.9980001 m
71.453011 8.9980001 l
73.378014 4 l
72.44001 4 l
71.971016 5.323 l
69.976013 5.323 l
69.507011 4 l
68.604012 4 l
70.522011 8.9980001 l
h
70.214012 5.9879999 m
71.740013 5.9879999 l
70.991013 8.1370001 l
70.970009 8.1370001 l
70.214012 5.9879999 l
h
73.378014 8.9980001 m
77.424011 8.9980001 l
77.424011 8.2419996 l
75.835014 8.2419996 l
75.835014 4 l
74.960014 4 l
74.960014 8.2419996 l
73.378014 8.2419996 l
73.378014 8.9980001 l
h
78.005013 8.9980001 m
78.880013 8.9980001 l
78.880013 4 l
78.005013 4 l
78.005013 8.9980001 l
h
82.07901 8.4029999 m
81.813011 8.4029999 81.583183 8.3493338 81.389511 8.2419996 c
81.195847 8.1346664 81.038345 7.9911675 80.917015 7.8115001 c
80.795677 7.6318326 80.705849 7.4276676 80.647514 7.1989999 c
80.58918 6.9703321 80.560013 6.7370014 80.560013 6.4990001 c
80.560013 6.2609987 80.58918 6.027668 80.647514 5.7989998 c
80.705849 5.5703321 80.795677 5.3661675 80.917015 5.1865001 c
81.038345 5.0068326 81.195847 4.8633337 81.389511 4.756 c
81.583183 4.6486659 81.813011 4.5949998 82.07901 4.5949998 c
82.345016 4.5949998 82.574844 4.6486659 82.768509 4.756 c
82.962181 4.8633337 83.119675 5.0068326 83.241013 5.1865001 c
83.362343 5.3661675 83.452179 5.5703321 83.510513 5.7989998 c
83.568848 6.027668 83.598015 6.2609987 83.598015 6.4990001 c
83.598015 6.7370014 83.568848 6.9703321 83.510513 7.1989999 c
83.452179 7.4276676 83.362343 7.6318326 83.241013 7.8115001 c
83.119675 7.9911675 82.962181 8.1346664 82.768509 8.2419996 c
82.574844 8.3493338 82.345016 8.4029999 82.07901 8.4029999 c
h
82.07901 9.1169996 m
82.452347 9.1169996 82.787178 9.0470009 83.083511 8.9069996 c
83.379845 8.7669992 83.630676 8.578001 83.836014 8.3400002 c
84.041344 8.1019993 84.198845 7.8243351 84.30851 7.507 c
84.418182 7.1896653 84.473015 6.8536682 84.473015 6.4990001 c
84.473015 6.1396646 84.418182 5.8013349 84.30851 5.4840002 c
84.198845 5.1666651 84.041344 4.8890014 83.836014 4.651 c
83.630676 4.4129987 83.379845 4.2251673 83.083511 4.0875001 c
82.787178 3.9498327 82.452347 3.881 82.07901 3.881 c
81.705673 3.881 81.37085 3.9498327 81.074509 4.0875001 c
80.778175 4.2251673 80.527344 4.4129987 80.322014 4.651 c
80.116676 4.8890014 79.959183 5.1666651 79.84951 5.4840002 c
79.739845 5.8013349 79.685013 6.1396646 79.685013 6.4990001 c
79.685013 6.8536682 79.739845 7.1896653 79.84951 7.507 c
79.959183 7.8243351 80.116676 8.1019993 80.322014 8.3400002 c
80.527344 8.578001 80.778175 8.7669992 81.074509 8.9069996 c
81.37085 9.0470009 81.705673 9.1169996 82.07901 9.1169996 c
h
85.236015 8.9980001 m
86.160011 8.9980001 l
88.442009 5.316 l
88.456009 5.316 l
88.456009 8.9980001 l
89.289009 8.9980001 l
89.289009 4 l
88.365013 4 l
86.090012 7.6750002 l
86.069016 7.6750002 l
86.069016 4 l
85.236015 4 l
85.236015 8.9980001 l
h
W*
0 0 94 39 rc
33.700012 14.117 m
94.289009 14.117 l
94.289009 -1.119 l
33.700012 -1.119 l
h
f
ep
end
%%Trailer
%%EOF
